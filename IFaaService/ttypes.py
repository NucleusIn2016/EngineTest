#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class EEnginIoctrlType:
  ENGIN_IOCTRL_TRACE = 1953653091
  ENGIN_IOCTRL_DUMP = 1691706480
  ENGIN_IOCTRL_IOCTRL = 1668575852
  ENGIN_IOCTRL_SURVEIL = 1937076854

  _VALUES_TO_NAMES = {
    1953653091: "ENGIN_IOCTRL_TRACE",
    1691706480: "ENGIN_IOCTRL_DUMP",
    1668575852: "ENGIN_IOCTRL_IOCTRL",
    1937076854: "ENGIN_IOCTRL_SURVEIL",
  }

  _NAMES_TO_VALUES = {
    "ENGIN_IOCTRL_TRACE": 1953653091,
    "ENGIN_IOCTRL_DUMP": 1691706480,
    "ENGIN_IOCTRL_IOCTRL": 1668575852,
    "ENGIN_IOCTRL_SURVEIL": 1937076854,
  }

class ETraceIoctrlType:
  TRACE_IOCTRL_LEVEL = 0
  TRACE_IOCTRL_SWITCH = 1

  _VALUES_TO_NAMES = {
    0: "TRACE_IOCTRL_LEVEL",
    1: "TRACE_IOCTRL_SWITCH",
  }

  _NAMES_TO_VALUES = {
    "TRACE_IOCTRL_LEVEL": 0,
    "TRACE_IOCTRL_SWITCH": 1,
  }

class EParamIoctrlType:
  PARAM_IOCTRL_BLACKLIST = 0
  PARAM_IOCTRL_VERIFYRULE = 1
  PARAM_IOCTRL_TASKINFO = 2
  PARAM_IOCTRL_SNAPER_FLAG = 3
  PARAM_IOCTRL_SNAPER_DECTYPE = 4
  PARAM_IOCTRL_PERSON = 5
  PARAM_IOCTRL_CAMERA = 6
  PARAM_IOCTRL_REDLIST = 7
  PARAM_IOCTRL_SNAPERCTRL = 8
  PARAM_IOCTRL_LONGTERM_FILT = 9
  PARAM_IOCTRL_CID_IMPORT = 10
  PARAM_IOCTRL_PERSON_CLASS = 11
  PARAM_IOCTRL_FEATURE_UPDATE = 12
  PARAM_IOCTRL_FACE_RECALC = 13
  PARAM_IOCTRL_JUZHU_IMPORT = 14
  PARAM_IOCTRL_BLACK_DETAIL = 15
  PARAM_IOCTRL_OTHER_IMPORT = 16
  PARAM_IOCTRL_RED_IMPORT = 17
  PARAM_IOCTRL_FILTER_UPDATE = 18
  PARAM_IOCTRL_FAKE_IMPORT = 19
  PARAM_IOCTRL_RESIDENT_IMPORT = 20
  PARAM_IOCTRL_DOOR_IMPORT = 21

  _VALUES_TO_NAMES = {
    0: "PARAM_IOCTRL_BLACKLIST",
    1: "PARAM_IOCTRL_VERIFYRULE",
    2: "PARAM_IOCTRL_TASKINFO",
    3: "PARAM_IOCTRL_SNAPER_FLAG",
    4: "PARAM_IOCTRL_SNAPER_DECTYPE",
    5: "PARAM_IOCTRL_PERSON",
    6: "PARAM_IOCTRL_CAMERA",
    7: "PARAM_IOCTRL_REDLIST",
    8: "PARAM_IOCTRL_SNAPERCTRL",
    9: "PARAM_IOCTRL_LONGTERM_FILT",
    10: "PARAM_IOCTRL_CID_IMPORT",
    11: "PARAM_IOCTRL_PERSON_CLASS",
    12: "PARAM_IOCTRL_FEATURE_UPDATE",
    13: "PARAM_IOCTRL_FACE_RECALC",
    14: "PARAM_IOCTRL_JUZHU_IMPORT",
    15: "PARAM_IOCTRL_BLACK_DETAIL",
    16: "PARAM_IOCTRL_OTHER_IMPORT",
    17: "PARAM_IOCTRL_RED_IMPORT",
    18: "PARAM_IOCTRL_FILTER_UPDATE",
    19: "PARAM_IOCTRL_FAKE_IMPORT",
    20: "PARAM_IOCTRL_RESIDENT_IMPORT",
    21: "PARAM_IOCTRL_DOOR_IMPORT",
  }

  _NAMES_TO_VALUES = {
    "PARAM_IOCTRL_BLACKLIST": 0,
    "PARAM_IOCTRL_VERIFYRULE": 1,
    "PARAM_IOCTRL_TASKINFO": 2,
    "PARAM_IOCTRL_SNAPER_FLAG": 3,
    "PARAM_IOCTRL_SNAPER_DECTYPE": 4,
    "PARAM_IOCTRL_PERSON": 5,
    "PARAM_IOCTRL_CAMERA": 6,
    "PARAM_IOCTRL_REDLIST": 7,
    "PARAM_IOCTRL_SNAPERCTRL": 8,
    "PARAM_IOCTRL_LONGTERM_FILT": 9,
    "PARAM_IOCTRL_CID_IMPORT": 10,
    "PARAM_IOCTRL_PERSON_CLASS": 11,
    "PARAM_IOCTRL_FEATURE_UPDATE": 12,
    "PARAM_IOCTRL_FACE_RECALC": 13,
    "PARAM_IOCTRL_JUZHU_IMPORT": 14,
    "PARAM_IOCTRL_BLACK_DETAIL": 15,
    "PARAM_IOCTRL_OTHER_IMPORT": 16,
    "PARAM_IOCTRL_RED_IMPORT": 17,
    "PARAM_IOCTRL_FILTER_UPDATE": 18,
    "PARAM_IOCTRL_FAKE_IMPORT": 19,
    "PARAM_IOCTRL_RESIDENT_IMPORT": 20,
    "PARAM_IOCTRL_DOOR_IMPORT": 21,
  }

class EFakeFilterUpdateType:
  FILTER_UPDATE_ALL = 0
  FILTER_UPDATE_FACE = 1
  FILTER_UPDATE_SRC = 2

  _VALUES_TO_NAMES = {
    0: "FILTER_UPDATE_ALL",
    1: "FILTER_UPDATE_FACE",
    2: "FILTER_UPDATE_SRC",
  }

  _NAMES_TO_VALUES = {
    "FILTER_UPDATE_ALL": 0,
    "FILTER_UPDATE_FACE": 1,
    "FILTER_UPDATE_SRC": 2,
  }

class EPersonClassfierAction:
  PERSON_CLASS_ACTION_STARTUP = 0
  PERSON_CLASS_ACTION_STOP = 1

  _VALUES_TO_NAMES = {
    0: "PERSON_CLASS_ACTION_STARTUP",
    1: "PERSON_CLASS_ACTION_STOP",
  }

  _NAMES_TO_VALUES = {
    "PERSON_CLASS_ACTION_STARTUP": 0,
    "PERSON_CLASS_ACTION_STOP": 1,
  }

class EFaceAttrUpdateAction:
  ATTR_UPDATE_ACTION_STARTUP = 0
  ATTR_UPDATE_ACTION_STOP = 1

  _VALUES_TO_NAMES = {
    0: "ATTR_UPDATE_ACTION_STARTUP",
    1: "ATTR_UPDATE_ACTION_STOP",
  }

  _NAMES_TO_VALUES = {
    "ATTR_UPDATE_ACTION_STARTUP": 0,
    "ATTR_UPDATE_ACTION_STOP": 1,
  }

class ESurveilIoctrlType:
  SURVEIL_IOCTRL_ADD_PERSON = 0
  SURVEIL_IOCTRL_DEL_PERSON = 1
  SURVEIL_IOCTRL_UPDATE_PERSON = 2

  _VALUES_TO_NAMES = {
    0: "SURVEIL_IOCTRL_ADD_PERSON",
    1: "SURVEIL_IOCTRL_DEL_PERSON",
    2: "SURVEIL_IOCTRL_UPDATE_PERSON",
  }

  _NAMES_TO_VALUES = {
    "SURVEIL_IOCTRL_ADD_PERSON": 0,
    "SURVEIL_IOCTRL_DEL_PERSON": 1,
    "SURVEIL_IOCTRL_UPDATE_PERSON": 2,
  }

class EBListIoctrlType:
  BLIST_IOCTRL_CAMERA_UPDATE = 0
  BLIST_IOCTRL_AREA_UPDATE = 1
  BLIST_PERSON_UPDATE = 2
  BLIST_BANK_SURVEILLANCE_UPDATE = 3

  _VALUES_TO_NAMES = {
    0: "BLIST_IOCTRL_CAMERA_UPDATE",
    1: "BLIST_IOCTRL_AREA_UPDATE",
    2: "BLIST_PERSON_UPDATE",
    3: "BLIST_BANK_SURVEILLANCE_UPDATE",
  }

  _NAMES_TO_VALUES = {
    "BLIST_IOCTRL_CAMERA_UPDATE": 0,
    "BLIST_IOCTRL_AREA_UPDATE": 1,
    "BLIST_PERSON_UPDATE": 2,
    "BLIST_BANK_SURVEILLANCE_UPDATE": 3,
  }

class ERuleIoctrlType:
  RULE_IOCTRL_UPDATE = 0

  _VALUES_TO_NAMES = {
    0: "RULE_IOCTRL_UPDATE",
  }

  _NAMES_TO_VALUES = {
    "RULE_IOCTRL_UPDATE": 0,
  }

class ETaskIoctrlType:
  TASK_IOCTRL_BANKID = 0
  TASK_IOCTRL_SOURCEID = 1
  TASK_IOCTRL_TYPE = 2

  _VALUES_TO_NAMES = {
    0: "TASK_IOCTRL_BANKID",
    1: "TASK_IOCTRL_SOURCEID",
    2: "TASK_IOCTRL_TYPE",
  }

  _NAMES_TO_VALUES = {
    "TASK_IOCTRL_BANKID": 0,
    "TASK_IOCTRL_SOURCEID": 1,
    "TASK_IOCTRL_TYPE": 2,
  }

class ECameraIoctrlType:
  CAMERA_IOCTRL_CAPTURE = 0

  _VALUES_TO_NAMES = {
    0: "CAMERA_IOCTRL_CAPTURE",
  }

  _NAMES_TO_VALUES = {
    "CAMERA_IOCTRL_CAPTURE": 0,
  }

class EPersonIoctrlType:
  PERSON_IOCTRL_RULEIID = 0

  _VALUES_TO_NAMES = {
    0: "PERSON_IOCTRL_RULEIID",
  }

  _NAMES_TO_VALUES = {
    "PERSON_IOCTRL_RULEIID": 0,
  }

class ERedListIoctrlType:
  REDLIST_IOCTRL_QUERY = 0
  REDLIST_IOCTRL_ADD = 1
  REDLIST_IOCTRL_DEL = 2
  REDLIST_IOCTRL_REFRESH = 3
  REDLIST_IOCTRL_SWITCHON = 4
  REDLIST_IOCTRL_SWITCHOFF = 5

  _VALUES_TO_NAMES = {
    0: "REDLIST_IOCTRL_QUERY",
    1: "REDLIST_IOCTRL_ADD",
    2: "REDLIST_IOCTRL_DEL",
    3: "REDLIST_IOCTRL_REFRESH",
    4: "REDLIST_IOCTRL_SWITCHON",
    5: "REDLIST_IOCTRL_SWITCHOFF",
  }

  _NAMES_TO_VALUES = {
    "REDLIST_IOCTRL_QUERY": 0,
    "REDLIST_IOCTRL_ADD": 1,
    "REDLIST_IOCTRL_DEL": 2,
    "REDLIST_IOCTRL_REFRESH": 3,
    "REDLIST_IOCTRL_SWITCHON": 4,
    "REDLIST_IOCTRL_SWITCHOFF": 5,
  }

class ESnaperCtrlType:
  SNAPER_CTRL_IPC_CAP = 0
  SNAPER_CTRL_IPC_RST = 1

  _VALUES_TO_NAMES = {
    0: "SNAPER_CTRL_IPC_CAP",
    1: "SNAPER_CTRL_IPC_RST",
  }

  _NAMES_TO_VALUES = {
    "SNAPER_CTRL_IPC_CAP": 0,
    "SNAPER_CTRL_IPC_RST": 1,
  }

class ELongTermFiltCtrl:
  LONG_FILT_CTRL_INIT = 0
  LONG_FILT_CTRL_UPDATE = 1
  LONG_FILT_CTRL_ADD_PERSON = 2
  LONG_FILT_CTRL_DEL_PERSON = 3
  LONG_FILT_CTRL_ADD_CAMERA = 4
  LONG_FILT_CTRL_DEL_CAMERA = 5
  LONG_FILT_CTRL_CLR_ZONE = 6

  _VALUES_TO_NAMES = {
    0: "LONG_FILT_CTRL_INIT",
    1: "LONG_FILT_CTRL_UPDATE",
    2: "LONG_FILT_CTRL_ADD_PERSON",
    3: "LONG_FILT_CTRL_DEL_PERSON",
    4: "LONG_FILT_CTRL_ADD_CAMERA",
    5: "LONG_FILT_CTRL_DEL_CAMERA",
    6: "LONG_FILT_CTRL_CLR_ZONE",
  }

  _NAMES_TO_VALUES = {
    "LONG_FILT_CTRL_INIT": 0,
    "LONG_FILT_CTRL_UPDATE": 1,
    "LONG_FILT_CTRL_ADD_PERSON": 2,
    "LONG_FILT_CTRL_DEL_PERSON": 3,
    "LONG_FILT_CTRL_ADD_CAMERA": 4,
    "LONG_FILT_CTRL_DEL_CAMERA": 5,
    "LONG_FILT_CTRL_CLR_ZONE": 6,
  }

class EFeatureAlgVersion:
  FEATURE_ALG_VERSION_ORG = 0
  FEATURE_ALG_VERSION_TUNA = 1
  FEATURE_ALG_VERSION_RABBIT = 2
  FEATURE_ALG_VERSION_TORTOISE = 3

  _VALUES_TO_NAMES = {
    0: "FEATURE_ALG_VERSION_ORG",
    1: "FEATURE_ALG_VERSION_TUNA",
    2: "FEATURE_ALG_VERSION_RABBIT",
    3: "FEATURE_ALG_VERSION_TORTOISE",
  }

  _NAMES_TO_VALUES = {
    "FEATURE_ALG_VERSION_ORG": 0,
    "FEATURE_ALG_VERSION_TUNA": 1,
    "FEATURE_ALG_VERSION_RABBIT": 2,
    "FEATURE_ALG_VERSION_TORTOISE": 3,
  }

class T_IF_FacePose:
  IF_StrictFrontal = 0
  IF_Frontal = 1
  IF_HalfLeft = 2
  IF_HalfRight = 3
  IF_FullLeft = 4
  IF_FullRight = 5
  IF_FrontalCW30 = 6
  IF_LeftHalfProfileCW30 = 7
  IF_RightHalfProfileCW30 = 8
  IF_LeftProfileCW30 = 9
  IF_RightProfileCW30 = 10
  IF_FrontalCCW30 = 11
  IF_LeftHalfProfileCCW30 = 12
  IF_RightHalfProfileCCW30 = 13
  IF_LeftProfileCCW30 = 14
  IF_RightProfileCCW30 = 15

  _VALUES_TO_NAMES = {
    0: "IF_StrictFrontal",
    1: "IF_Frontal",
    2: "IF_HalfLeft",
    3: "IF_HalfRight",
    4: "IF_FullLeft",
    5: "IF_FullRight",
    6: "IF_FrontalCW30",
    7: "IF_LeftHalfProfileCW30",
    8: "IF_RightHalfProfileCW30",
    9: "IF_LeftProfileCW30",
    10: "IF_RightProfileCW30",
    11: "IF_FrontalCCW30",
    12: "IF_LeftHalfProfileCCW30",
    13: "IF_RightHalfProfileCCW30",
    14: "IF_LeftProfileCCW30",
    15: "IF_RightProfileCCW30",
  }

  _NAMES_TO_VALUES = {
    "IF_StrictFrontal": 0,
    "IF_Frontal": 1,
    "IF_HalfLeft": 2,
    "IF_HalfRight": 3,
    "IF_FullLeft": 4,
    "IF_FullRight": 5,
    "IF_FrontalCW30": 6,
    "IF_LeftHalfProfileCW30": 7,
    "IF_RightHalfProfileCW30": 8,
    "IF_LeftProfileCW30": 9,
    "IF_RightProfileCW30": 10,
    "IF_FrontalCCW30": 11,
    "IF_LeftHalfProfileCCW30": 12,
    "IF_RightHalfProfileCCW30": 13,
    "IF_LeftProfileCCW30": 14,
    "IF_RightProfileCCW30": 15,
  }

class E_FACE_EXTRACT_TYPE:
  FACE_EXT_TYPE_BLACKDETAIL = 0
  FACE_EXT_TYPE_SUSPECTDETAIL = 1
  FACE_EXT_TYPE_REDDETAIL = 2
  FACE_EXT_TYPE_CIDDETAIL = 3
  FACE_EXT_TYPE_JUNZHUDETAIL = 4
  FACE_EXT_TYPE_FACEINFO = 5
  FACE_EXT_TYPE_OTHERDETAIL = 6
  FACE_EXT_TYPE_FAKEDETAIL = 7
  FACE_EXT_TYPE_COMMUNITY_RESIDENT_DETAIL = 8
  FACE_EXT_TYPE_COMMUNITY_DOOR_DETAIL = 9

  _VALUES_TO_NAMES = {
    0: "FACE_EXT_TYPE_BLACKDETAIL",
    1: "FACE_EXT_TYPE_SUSPECTDETAIL",
    2: "FACE_EXT_TYPE_REDDETAIL",
    3: "FACE_EXT_TYPE_CIDDETAIL",
    4: "FACE_EXT_TYPE_JUNZHUDETAIL",
    5: "FACE_EXT_TYPE_FACEINFO",
    6: "FACE_EXT_TYPE_OTHERDETAIL",
    7: "FACE_EXT_TYPE_FAKEDETAIL",
    8: "FACE_EXT_TYPE_COMMUNITY_RESIDENT_DETAIL",
    9: "FACE_EXT_TYPE_COMMUNITY_DOOR_DETAIL",
  }

  _NAMES_TO_VALUES = {
    "FACE_EXT_TYPE_BLACKDETAIL": 0,
    "FACE_EXT_TYPE_SUSPECTDETAIL": 1,
    "FACE_EXT_TYPE_REDDETAIL": 2,
    "FACE_EXT_TYPE_CIDDETAIL": 3,
    "FACE_EXT_TYPE_JUNZHUDETAIL": 4,
    "FACE_EXT_TYPE_FACEINFO": 5,
    "FACE_EXT_TYPE_OTHERDETAIL": 6,
    "FACE_EXT_TYPE_FAKEDETAIL": 7,
    "FACE_EXT_TYPE_COMMUNITY_RESIDENT_DETAIL": 8,
    "FACE_EXT_TYPE_COMMUNITY_DOOR_DETAIL": 9,
  }

class E_FACE_FORBIDEN_VALUE:
  FACE_FORBIDEN_VALUE_FALSE = 0
  FACE_FORBIDEN_VALUE_TRUE = 1

  _VALUES_TO_NAMES = {
    0: "FACE_FORBIDEN_VALUE_FALSE",
    1: "FACE_FORBIDEN_VALUE_TRUE",
  }

  _NAMES_TO_VALUES = {
    "FACE_FORBIDEN_VALUE_FALSE": 0,
    "FACE_FORBIDEN_VALUE_TRUE": 1,
  }

class E_FLUSH_PROGRESS_TYPE:
  FLUSH_PROGRESS_TYPE_CIDDETAIL = 0
  FLUSH_PROGRESS_TYPE_BLACKDETAIL = 1
  FLUSH_PROGRESS_TYPE_FACEFEATURE = 2
  FLUSH_PROGRESS_TYPE_JUZHUDETAIL = 3
  FLUSH_PROGRESS_TYPE_OHTERDETAIL = 4
  FLUSH_PROGRESS_TYPE_RESIDENTDETAIL = 5
  FLUSH_PROGRESS_TYPE_DOORDETAIL = 6

  _VALUES_TO_NAMES = {
    0: "FLUSH_PROGRESS_TYPE_CIDDETAIL",
    1: "FLUSH_PROGRESS_TYPE_BLACKDETAIL",
    2: "FLUSH_PROGRESS_TYPE_FACEFEATURE",
    3: "FLUSH_PROGRESS_TYPE_JUZHUDETAIL",
    4: "FLUSH_PROGRESS_TYPE_OHTERDETAIL",
    5: "FLUSH_PROGRESS_TYPE_RESIDENTDETAIL",
    6: "FLUSH_PROGRESS_TYPE_DOORDETAIL",
  }

  _NAMES_TO_VALUES = {
    "FLUSH_PROGRESS_TYPE_CIDDETAIL": 0,
    "FLUSH_PROGRESS_TYPE_BLACKDETAIL": 1,
    "FLUSH_PROGRESS_TYPE_FACEFEATURE": 2,
    "FLUSH_PROGRESS_TYPE_JUZHUDETAIL": 3,
    "FLUSH_PROGRESS_TYPE_OHTERDETAIL": 4,
    "FLUSH_PROGRESS_TYPE_RESIDENTDETAIL": 5,
    "FLUSH_PROGRESS_TYPE_DOORDETAIL": 6,
  }

class E_FACE_ATTRIBUTE_LIST:
  FACE_ATTR_NULL = -1
  FACE_ATTR_POSE = 0
  FACE_ATTR_GENDER = 1
  FACE_ATTR_AGE = 2
  FACE_ATTR_LANDMARK = 3
  FACE_ATTR_DRESS = 4
  FACE_ATTR_RACE = 5
  FACE_ATTR_QUALITY = 6

  _VALUES_TO_NAMES = {
    -1: "FACE_ATTR_NULL",
    0: "FACE_ATTR_POSE",
    1: "FACE_ATTR_GENDER",
    2: "FACE_ATTR_AGE",
    3: "FACE_ATTR_LANDMARK",
    4: "FACE_ATTR_DRESS",
    5: "FACE_ATTR_RACE",
    6: "FACE_ATTR_QUALITY",
  }

  _NAMES_TO_VALUES = {
    "FACE_ATTR_NULL": -1,
    "FACE_ATTR_POSE": 0,
    "FACE_ATTR_GENDER": 1,
    "FACE_ATTR_AGE": 2,
    "FACE_ATTR_LANDMARK": 3,
    "FACE_ATTR_DRESS": 4,
    "FACE_ATTR_RACE": 5,
    "FACE_ATTR_QUALITY": 6,
  }

class E_FACE_FEATURE_VALUE_TYPE:
  FEATURE_VALUE_TYPE_UNENCYPTED = 0
  FEATURE_VALUE_TYPE_ENCYPTED = 1

  _VALUES_TO_NAMES = {
    0: "FEATURE_VALUE_TYPE_UNENCYPTED",
    1: "FEATURE_VALUE_TYPE_ENCYPTED",
  }

  _NAMES_TO_VALUES = {
    "FEATURE_VALUE_TYPE_UNENCYPTED": 0,
    "FEATURE_VALUE_TYPE_ENCYPTED": 1,
  }


class t_if_rect_t:
  """
  Attributes:
   - left
   - top
   - right
   - bottom
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'left', None, None, ), # 1
    (2, TType.I32, 'top', None, None, ), # 2
    (3, TType.I32, 'right', None, None, ), # 3
    (4, TType.I32, 'bottom', None, None, ), # 4
  )

  def __init__(self, left=None, top=None, right=None, bottom=None,):
    self.left = left
    self.top = top
    self.right = right
    self.bottom = bottom

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.left = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.top = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.right = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.bottom = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('t_if_rect_t')
    if self.left is not None:
      oprot.writeFieldBegin('left', TType.I32, 1)
      oprot.writeI32(self.left)
      oprot.writeFieldEnd()
    if self.top is not None:
      oprot.writeFieldBegin('top', TType.I32, 2)
      oprot.writeI32(self.top)
      oprot.writeFieldEnd()
    if self.right is not None:
      oprot.writeFieldBegin('right', TType.I32, 3)
      oprot.writeI32(self.right)
      oprot.writeFieldEnd()
    if self.bottom is not None:
      oprot.writeFieldBegin('bottom', TType.I32, 4)
      oprot.writeI32(self.bottom)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.left)
    value = (value * 31) ^ hash(self.top)
    value = (value * 31) ^ hash(self.right)
    value = (value * 31) ^ hash(self.bottom)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class T_IF_FACERECT:
  """
  Attributes:
   - Rect
   - Pose
   - forbiden
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'Rect', (t_if_rect_t, t_if_rect_t.thrift_spec), None, ), # 1
    (2, TType.I32, 'Pose', None, None, ), # 2
    (3, TType.I32, 'forbiden', None, None, ), # 3
  )

  def __init__(self, Rect=None, Pose=None, forbiden=None,):
    self.Rect = Rect
    self.Pose = Pose
    self.forbiden = forbiden

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.Rect = t_if_rect_t()
          self.Rect.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.Pose = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.forbiden = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('T_IF_FACERECT')
    if self.Rect is not None:
      oprot.writeFieldBegin('Rect', TType.STRUCT, 1)
      self.Rect.write(oprot)
      oprot.writeFieldEnd()
    if self.Pose is not None:
      oprot.writeFieldBegin('Pose', TType.I32, 2)
      oprot.writeI32(self.Pose)
      oprot.writeFieldEnd()
    if self.forbiden is not None:
      oprot.writeFieldBegin('forbiden', TType.I32, 3)
      oprot.writeI32(self.forbiden)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.Rect)
    value = (value * 31) ^ hash(self.Pose)
    value = (value * 31) ^ hash(self.forbiden)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class T_IF_IMGATTR:
  """
  Attributes:
   - Rect
   - Age
   - Gender
   - Accessory
   - ImgTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'Rect', (t_if_rect_t, t_if_rect_t.thrift_spec), None, ), # 1
    (2, TType.I32, 'Age', None, None, ), # 2
    (3, TType.I32, 'Gender', None, None, ), # 3
    (4, TType.I32, 'Accessory', None, None, ), # 4
    (5, TType.I64, 'ImgTime', None, None, ), # 5
  )

  def __init__(self, Rect=None, Age=None, Gender=None, Accessory=None, ImgTime=None,):
    self.Rect = Rect
    self.Age = Age
    self.Gender = Gender
    self.Accessory = Accessory
    self.ImgTime = ImgTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.Rect = t_if_rect_t()
          self.Rect.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.Age = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.Gender = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.Accessory = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.ImgTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('T_IF_IMGATTR')
    if self.Rect is not None:
      oprot.writeFieldBegin('Rect', TType.STRUCT, 1)
      self.Rect.write(oprot)
      oprot.writeFieldEnd()
    if self.Age is not None:
      oprot.writeFieldBegin('Age', TType.I32, 2)
      oprot.writeI32(self.Age)
      oprot.writeFieldEnd()
    if self.Gender is not None:
      oprot.writeFieldBegin('Gender', TType.I32, 3)
      oprot.writeI32(self.Gender)
      oprot.writeFieldEnd()
    if self.Accessory is not None:
      oprot.writeFieldBegin('Accessory', TType.I32, 4)
      oprot.writeI32(self.Accessory)
      oprot.writeFieldEnd()
    if self.ImgTime is not None:
      oprot.writeFieldBegin('ImgTime', TType.I64, 5)
      oprot.writeI64(self.ImgTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.Rect)
    value = (value * 31) ^ hash(self.Age)
    value = (value * 31) ^ hash(self.Gender)
    value = (value * 31) ^ hash(self.Accessory)
    value = (value * 31) ^ hash(self.ImgTime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class T_IF_TASK_INFO:
  """
  Attributes:
   - Id
   - SourceId
   - SourceType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'Id', None, None, ), # 1
    (2, TType.I64, 'SourceId', None, None, ), # 2
    (3, TType.I32, 'SourceType', None, None, ), # 3
  )

  def __init__(self, Id=None, SourceId=None, SourceType=None,):
    self.Id = Id
    self.SourceId = SourceId
    self.SourceType = SourceType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.Id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.SourceId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.SourceType = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('T_IF_TASK_INFO')
    if self.Id is not None:
      oprot.writeFieldBegin('Id', TType.I64, 1)
      oprot.writeI64(self.Id)
      oprot.writeFieldEnd()
    if self.SourceId is not None:
      oprot.writeFieldBegin('SourceId', TType.I64, 2)
      oprot.writeI64(self.SourceId)
      oprot.writeFieldEnd()
    if self.SourceType is not None:
      oprot.writeFieldBegin('SourceType', TType.I32, 3)
      oprot.writeI32(self.SourceType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.Id)
    value = (value * 31) ^ hash(self.SourceId)
    value = (value * 31) ^ hash(self.SourceType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class T_IF_ALARM_INFO:
  """
  Attributes:
   - Id
   - TaskId
   - BlackId
   - FaceId
   - Confidence
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'Id', None, None, ), # 1
    (2, TType.I64, 'TaskId', None, None, ), # 2
    (3, TType.I64, 'BlackId', None, None, ), # 3
    (4, TType.I64, 'FaceId', None, None, ), # 4
    (5, TType.DOUBLE, 'Confidence', None, None, ), # 5
  )

  def __init__(self, Id=None, TaskId=None, BlackId=None, FaceId=None, Confidence=None,):
    self.Id = Id
    self.TaskId = TaskId
    self.BlackId = BlackId
    self.FaceId = FaceId
    self.Confidence = Confidence

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.Id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.TaskId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.BlackId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.FaceId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.Confidence = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('T_IF_ALARM_INFO')
    if self.Id is not None:
      oprot.writeFieldBegin('Id', TType.I64, 1)
      oprot.writeI64(self.Id)
      oprot.writeFieldEnd()
    if self.TaskId is not None:
      oprot.writeFieldBegin('TaskId', TType.I64, 2)
      oprot.writeI64(self.TaskId)
      oprot.writeFieldEnd()
    if self.BlackId is not None:
      oprot.writeFieldBegin('BlackId', TType.I64, 3)
      oprot.writeI64(self.BlackId)
      oprot.writeFieldEnd()
    if self.FaceId is not None:
      oprot.writeFieldBegin('FaceId', TType.I64, 4)
      oprot.writeI64(self.FaceId)
      oprot.writeFieldEnd()
    if self.Confidence is not None:
      oprot.writeFieldBegin('Confidence', TType.DOUBLE, 5)
      oprot.writeDouble(self.Confidence)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.Id)
    value = (value * 31) ^ hash(self.TaskId)
    value = (value * 31) ^ hash(self.BlackId)
    value = (value * 31) ^ hash(self.FaceId)
    value = (value * 31) ^ hash(self.Confidence)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class T_CapRstOndemand:
  """
  Attributes:
   - ImageId
   - FaceIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'ImageId', None, None, ), # 1
    (2, TType.LIST, 'FaceIds', (TType.I64,None), None, ), # 2
  )

  def __init__(self, ImageId=None, FaceIds=None,):
    self.ImageId = ImageId
    self.FaceIds = FaceIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.ImageId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.FaceIds = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI64()
            self.FaceIds.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('T_CapRstOndemand')
    if self.ImageId is not None:
      oprot.writeFieldBegin('ImageId', TType.I64, 1)
      oprot.writeI64(self.ImageId)
      oprot.writeFieldEnd()
    if self.FaceIds is not None:
      oprot.writeFieldBegin('FaceIds', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.FaceIds))
      for iter6 in self.FaceIds:
        oprot.writeI64(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ImageId)
    value = (value * 31) ^ hash(self.FaceIds)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class T_ProgressQueryRst:
  """
  Attributes:
   - TotalReqCnt
   - FinishReqCnt
   - TotalItemCnt
   - FinishItemCnt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'TotalReqCnt', None, None, ), # 1
    (2, TType.I64, 'FinishReqCnt', None, None, ), # 2
    (3, TType.I64, 'TotalItemCnt', None, None, ), # 3
    (4, TType.I64, 'FinishItemCnt', None, None, ), # 4
  )

  def __init__(self, TotalReqCnt=None, FinishReqCnt=None, TotalItemCnt=None, FinishItemCnt=None,):
    self.TotalReqCnt = TotalReqCnt
    self.FinishReqCnt = FinishReqCnt
    self.TotalItemCnt = TotalItemCnt
    self.FinishItemCnt = FinishItemCnt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.TotalReqCnt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.FinishReqCnt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.TotalItemCnt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.FinishItemCnt = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('T_ProgressQueryRst')
    if self.TotalReqCnt is not None:
      oprot.writeFieldBegin('TotalReqCnt', TType.I64, 1)
      oprot.writeI64(self.TotalReqCnt)
      oprot.writeFieldEnd()
    if self.FinishReqCnt is not None:
      oprot.writeFieldBegin('FinishReqCnt', TType.I64, 2)
      oprot.writeI64(self.FinishReqCnt)
      oprot.writeFieldEnd()
    if self.TotalItemCnt is not None:
      oprot.writeFieldBegin('TotalItemCnt', TType.I64, 3)
      oprot.writeI64(self.TotalItemCnt)
      oprot.writeFieldEnd()
    if self.FinishItemCnt is not None:
      oprot.writeFieldBegin('FinishItemCnt', TType.I64, 4)
      oprot.writeI64(self.FinishItemCnt)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.TotalReqCnt)
    value = (value * 31) ^ hash(self.FinishReqCnt)
    value = (value * 31) ^ hash(self.TotalItemCnt)
    value = (value * 31) ^ hash(self.FinishItemCnt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class T_MulAlgFeatureExtReq:
  """
  Attributes:
   - FaceId
   - FaceTab
   - AlgVersions
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'FaceId', None, None, ), # 1
    (2, TType.I32, 'FaceTab', None, None, ), # 2
    (3, TType.LIST, 'AlgVersions', (TType.I32,None), None, ), # 3
  )

  def __init__(self, FaceId=None, FaceTab=None, AlgVersions=None,):
    self.FaceId = FaceId
    self.FaceTab = FaceTab
    self.AlgVersions = AlgVersions

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.FaceId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.FaceTab = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.AlgVersions = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readI32()
            self.AlgVersions.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('T_MulAlgFeatureExtReq')
    if self.FaceId is not None:
      oprot.writeFieldBegin('FaceId', TType.I64, 1)
      oprot.writeI64(self.FaceId)
      oprot.writeFieldEnd()
    if self.FaceTab is not None:
      oprot.writeFieldBegin('FaceTab', TType.I32, 2)
      oprot.writeI32(self.FaceTab)
      oprot.writeFieldEnd()
    if self.AlgVersions is not None:
      oprot.writeFieldBegin('AlgVersions', TType.LIST, 3)
      oprot.writeListBegin(TType.I32, len(self.AlgVersions))
      for iter13 in self.AlgVersions:
        oprot.writeI32(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.FaceId)
    value = (value * 31) ^ hash(self.FaceTab)
    value = (value * 31) ^ hash(self.AlgVersions)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class T_OneAlgFeatureExtRsp:
  """
  Attributes:
   - AlgVersion
   - ErrorCode
   - FeatureVal
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'AlgVersion', None, None, ), # 1
    (2, TType.I32, 'ErrorCode', None, None, ), # 2
    (3, TType.STRING, 'FeatureVal', None, None, ), # 3
  )

  def __init__(self, AlgVersion=None, ErrorCode=None, FeatureVal=None,):
    self.AlgVersion = AlgVersion
    self.ErrorCode = ErrorCode
    self.FeatureVal = FeatureVal

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.AlgVersion = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.ErrorCode = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.FeatureVal = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('T_OneAlgFeatureExtRsp')
    if self.AlgVersion is not None:
      oprot.writeFieldBegin('AlgVersion', TType.I32, 1)
      oprot.writeI32(self.AlgVersion)
      oprot.writeFieldEnd()
    if self.ErrorCode is not None:
      oprot.writeFieldBegin('ErrorCode', TType.I32, 2)
      oprot.writeI32(self.ErrorCode)
      oprot.writeFieldEnd()
    if self.FeatureVal is not None:
      oprot.writeFieldBegin('FeatureVal', TType.STRING, 3)
      oprot.writeString(self.FeatureVal)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.AlgVersion)
    value = (value * 31) ^ hash(self.ErrorCode)
    value = (value * 31) ^ hash(self.FeatureVal)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class T_MulAlgFeatureExtRsp:
  """
  Attributes:
   - FeatureCnt
   - forbiden
   - FeatureList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'FeatureCnt', None, None, ), # 1
    (2, TType.I32, 'forbiden', None, None, ), # 2
    (3, TType.LIST, 'FeatureList', (TType.STRUCT,(T_OneAlgFeatureExtRsp, T_OneAlgFeatureExtRsp.thrift_spec)), None, ), # 3
  )

  def __init__(self, FeatureCnt=None, forbiden=None, FeatureList=None,):
    self.FeatureCnt = FeatureCnt
    self.forbiden = forbiden
    self.FeatureList = FeatureList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.FeatureCnt = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.forbiden = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.FeatureList = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = T_OneAlgFeatureExtRsp()
            _elem19.read(iprot)
            self.FeatureList.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('T_MulAlgFeatureExtRsp')
    if self.FeatureCnt is not None:
      oprot.writeFieldBegin('FeatureCnt', TType.I32, 1)
      oprot.writeI32(self.FeatureCnt)
      oprot.writeFieldEnd()
    if self.forbiden is not None:
      oprot.writeFieldBegin('forbiden', TType.I32, 2)
      oprot.writeI32(self.forbiden)
      oprot.writeFieldEnd()
    if self.FeatureList is not None:
      oprot.writeFieldBegin('FeatureList', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.FeatureList))
      for iter20 in self.FeatureList:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.FeatureCnt)
    value = (value * 31) ^ hash(self.forbiden)
    value = (value * 31) ^ hash(self.FeatureList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class T_FaceVerifyRstRsp:
  """
  Attributes:
   - mErrno
   - mErrMsg
   - Confidence
   - Thresholds
   - FaceRectA
   - FaceRectB
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'mErrno', None, None, ), # 1
    (2, TType.STRING, 'mErrMsg', None, None, ), # 2
    (3, TType.DOUBLE, 'Confidence', None, None, ), # 3
    (4, TType.LIST, 'Thresholds', (TType.DOUBLE,None), None, ), # 4
    (5, TType.STRUCT, 'FaceRectA', (t_if_rect_t, t_if_rect_t.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'FaceRectB', (t_if_rect_t, t_if_rect_t.thrift_spec), None, ), # 6
  )

  def __init__(self, mErrno=None, mErrMsg=None, Confidence=None, Thresholds=None, FaceRectA=None, FaceRectB=None,):
    self.mErrno = mErrno
    self.mErrMsg = mErrMsg
    self.Confidence = Confidence
    self.Thresholds = Thresholds
    self.FaceRectA = FaceRectA
    self.FaceRectB = FaceRectB

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.mErrno = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.mErrMsg = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.Confidence = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.Thresholds = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readDouble()
            self.Thresholds.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.FaceRectA = t_if_rect_t()
          self.FaceRectA.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.FaceRectB = t_if_rect_t()
          self.FaceRectB.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('T_FaceVerifyRstRsp')
    if self.mErrno is not None:
      oprot.writeFieldBegin('mErrno', TType.I32, 1)
      oprot.writeI32(self.mErrno)
      oprot.writeFieldEnd()
    if self.mErrMsg is not None:
      oprot.writeFieldBegin('mErrMsg', TType.STRING, 2)
      oprot.writeString(self.mErrMsg)
      oprot.writeFieldEnd()
    if self.Confidence is not None:
      oprot.writeFieldBegin('Confidence', TType.DOUBLE, 3)
      oprot.writeDouble(self.Confidence)
      oprot.writeFieldEnd()
    if self.Thresholds is not None:
      oprot.writeFieldBegin('Thresholds', TType.LIST, 4)
      oprot.writeListBegin(TType.DOUBLE, len(self.Thresholds))
      for iter27 in self.Thresholds:
        oprot.writeDouble(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.FaceRectA is not None:
      oprot.writeFieldBegin('FaceRectA', TType.STRUCT, 5)
      self.FaceRectA.write(oprot)
      oprot.writeFieldEnd()
    if self.FaceRectB is not None:
      oprot.writeFieldBegin('FaceRectB', TType.STRUCT, 6)
      self.FaceRectB.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mErrno)
    value = (value * 31) ^ hash(self.mErrMsg)
    value = (value * 31) ^ hash(self.Confidence)
    value = (value * 31) ^ hash(self.Thresholds)
    value = (value * 31) ^ hash(self.FaceRectA)
    value = (value * 31) ^ hash(self.FaceRectB)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class T_AttrDetectRstItem:
  """
  Attributes:
   - FeatureLen
   - FeatureVersion
   - FaceAttrInfo
   - Feature
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'FeatureLen', None, None, ), # 1
    (2, TType.I32, 'FeatureVersion', None, None, ), # 2
    (3, TType.STRING, 'FaceAttrInfo', None, None, ), # 3
    (4, TType.STRING, 'Feature', None, None, ), # 4
  )

  def __init__(self, FeatureLen=None, FeatureVersion=None, FaceAttrInfo=None, Feature=None,):
    self.FeatureLen = FeatureLen
    self.FeatureVersion = FeatureVersion
    self.FaceAttrInfo = FaceAttrInfo
    self.Feature = Feature

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.FeatureLen = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.FeatureVersion = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.FaceAttrInfo = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.Feature = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('T_AttrDetectRstItem')
    if self.FeatureLen is not None:
      oprot.writeFieldBegin('FeatureLen', TType.I32, 1)
      oprot.writeI32(self.FeatureLen)
      oprot.writeFieldEnd()
    if self.FeatureVersion is not None:
      oprot.writeFieldBegin('FeatureVersion', TType.I32, 2)
      oprot.writeI32(self.FeatureVersion)
      oprot.writeFieldEnd()
    if self.FaceAttrInfo is not None:
      oprot.writeFieldBegin('FaceAttrInfo', TType.STRING, 3)
      oprot.writeString(self.FaceAttrInfo)
      oprot.writeFieldEnd()
    if self.Feature is not None:
      oprot.writeFieldBegin('Feature', TType.STRING, 4)
      oprot.writeString(self.Feature)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.FeatureLen)
    value = (value * 31) ^ hash(self.FeatureVersion)
    value = (value * 31) ^ hash(self.FaceAttrInfo)
    value = (value * 31) ^ hash(self.Feature)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class T_MulAttrDetectRstRsp:
  """
  Attributes:
   - mErrno
   - FaceNum
   - ErrMsg
   - FaceAttrList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'mErrno', None, None, ), # 1
    (2, TType.I32, 'FaceNum', None, None, ), # 2
    (3, TType.STRING, 'ErrMsg', None, None, ), # 3
    (4, TType.LIST, 'FaceAttrList', (TType.STRUCT,(T_AttrDetectRstItem, T_AttrDetectRstItem.thrift_spec)), None, ), # 4
  )

  def __init__(self, mErrno=None, FaceNum=None, ErrMsg=None, FaceAttrList=None,):
    self.mErrno = mErrno
    self.FaceNum = FaceNum
    self.ErrMsg = ErrMsg
    self.FaceAttrList = FaceAttrList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.mErrno = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.FaceNum = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.ErrMsg = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.FaceAttrList = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = T_AttrDetectRstItem()
            _elem33.read(iprot)
            self.FaceAttrList.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('T_MulAttrDetectRstRsp')
    if self.mErrno is not None:
      oprot.writeFieldBegin('mErrno', TType.I32, 1)
      oprot.writeI32(self.mErrno)
      oprot.writeFieldEnd()
    if self.FaceNum is not None:
      oprot.writeFieldBegin('FaceNum', TType.I32, 2)
      oprot.writeI32(self.FaceNum)
      oprot.writeFieldEnd()
    if self.ErrMsg is not None:
      oprot.writeFieldBegin('ErrMsg', TType.STRING, 3)
      oprot.writeString(self.ErrMsg)
      oprot.writeFieldEnd()
    if self.FaceAttrList is not None:
      oprot.writeFieldBegin('FaceAttrList', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.FaceAttrList))
      for iter34 in self.FaceAttrList:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mErrno)
    value = (value * 31) ^ hash(self.FaceNum)
    value = (value * 31) ^ hash(self.ErrMsg)
    value = (value * 31) ^ hash(self.FaceAttrList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class T_AttrDetectRstItem_v2:
  """
  Attributes:
   - FeatureSize
   - FeatureVersion
   - FaceAttrInfo
   - Feature
   - FeatureValueType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'FeatureSize', None, None, ), # 1
    (2, TType.I32, 'FeatureVersion', None, None, ), # 2
    (3, TType.STRING, 'FaceAttrInfo', None, None, ), # 3
    (4, TType.STRING, 'Feature', None, None, ), # 4
    (5, TType.I32, 'FeatureValueType', None, None, ), # 5
  )

  def __init__(self, FeatureSize=None, FeatureVersion=None, FaceAttrInfo=None, Feature=None, FeatureValueType=None,):
    self.FeatureSize = FeatureSize
    self.FeatureVersion = FeatureVersion
    self.FaceAttrInfo = FaceAttrInfo
    self.Feature = Feature
    self.FeatureValueType = FeatureValueType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.FeatureSize = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.FeatureVersion = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.FaceAttrInfo = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.Feature = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.FeatureValueType = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('T_AttrDetectRstItem_v2')
    if self.FeatureSize is not None:
      oprot.writeFieldBegin('FeatureSize', TType.I32, 1)
      oprot.writeI32(self.FeatureSize)
      oprot.writeFieldEnd()
    if self.FeatureVersion is not None:
      oprot.writeFieldBegin('FeatureVersion', TType.I32, 2)
      oprot.writeI32(self.FeatureVersion)
      oprot.writeFieldEnd()
    if self.FaceAttrInfo is not None:
      oprot.writeFieldBegin('FaceAttrInfo', TType.STRING, 3)
      oprot.writeString(self.FaceAttrInfo)
      oprot.writeFieldEnd()
    if self.Feature is not None:
      oprot.writeFieldBegin('Feature', TType.STRING, 4)
      oprot.writeString(self.Feature)
      oprot.writeFieldEnd()
    if self.FeatureValueType is not None:
      oprot.writeFieldBegin('FeatureValueType', TType.I32, 5)
      oprot.writeI32(self.FeatureValueType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.FeatureSize)
    value = (value * 31) ^ hash(self.FeatureVersion)
    value = (value * 31) ^ hash(self.FaceAttrInfo)
    value = (value * 31) ^ hash(self.Feature)
    value = (value * 31) ^ hash(self.FeatureValueType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class T_MulAttrDetectRstRsp_v2:
  """
  Attributes:
   - mErrno
   - FaceNum
   - ErrMsg
   - FaceAttrList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'mErrno', None, None, ), # 1
    (2, TType.I32, 'FaceNum', None, None, ), # 2
    (3, TType.STRING, 'ErrMsg', None, None, ), # 3
    (4, TType.LIST, 'FaceAttrList', (TType.STRUCT,(T_AttrDetectRstItem_v2, T_AttrDetectRstItem_v2.thrift_spec)), None, ), # 4
  )

  def __init__(self, mErrno=None, FaceNum=None, ErrMsg=None, FaceAttrList=None,):
    self.mErrno = mErrno
    self.FaceNum = FaceNum
    self.ErrMsg = ErrMsg
    self.FaceAttrList = FaceAttrList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.mErrno = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.FaceNum = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.ErrMsg = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.FaceAttrList = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = T_AttrDetectRstItem_v2()
            _elem40.read(iprot)
            self.FaceAttrList.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('T_MulAttrDetectRstRsp_v2')
    if self.mErrno is not None:
      oprot.writeFieldBegin('mErrno', TType.I32, 1)
      oprot.writeI32(self.mErrno)
      oprot.writeFieldEnd()
    if self.FaceNum is not None:
      oprot.writeFieldBegin('FaceNum', TType.I32, 2)
      oprot.writeI32(self.FaceNum)
      oprot.writeFieldEnd()
    if self.ErrMsg is not None:
      oprot.writeFieldBegin('ErrMsg', TType.STRING, 3)
      oprot.writeString(self.ErrMsg)
      oprot.writeFieldEnd()
    if self.FaceAttrList is not None:
      oprot.writeFieldBegin('FaceAttrList', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.FaceAttrList))
      for iter41 in self.FaceAttrList:
        iter41.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mErrno)
    value = (value * 31) ^ hash(self.FaceNum)
    value = (value * 31) ^ hash(self.ErrMsg)
    value = (value * 31) ^ hash(self.FaceAttrList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class T_LiveMotionInfo:
  """
  Attributes:
   - MotionID
   - MotionConfidence
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'MotionID', None, None, ), # 1
    (2, TType.DOUBLE, 'MotionConfidence', None, None, ), # 2
  )

  def __init__(self, MotionID=None, MotionConfidence=None,):
    self.MotionID = MotionID
    self.MotionConfidence = MotionConfidence

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.MotionID = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.MotionConfidence = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('T_LiveMotionInfo')
    if self.MotionID is not None:
      oprot.writeFieldBegin('MotionID', TType.I32, 1)
      oprot.writeI32(self.MotionID)
      oprot.writeFieldEnd()
    if self.MotionConfidence is not None:
      oprot.writeFieldBegin('MotionConfidence', TType.DOUBLE, 2)
      oprot.writeDouble(self.MotionConfidence)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.MotionID)
    value = (value * 31) ^ hash(self.MotionConfidence)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class T_MotionLiveDetectRst:
  """
  Attributes:
   - mErrno
   - ErrMsg
   - FaceImg
   - isLive
   - MotionList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'mErrno', None, None, ), # 1
    (2, TType.STRING, 'ErrMsg', None, None, ), # 2
    (3, TType.STRING, 'FaceImg', None, None, ), # 3
    (4, TType.BOOL, 'isLive', None, None, ), # 4
    (5, TType.LIST, 'MotionList', (TType.STRUCT,(T_LiveMotionInfo, T_LiveMotionInfo.thrift_spec)), None, ), # 5
  )

  def __init__(self, mErrno=None, ErrMsg=None, FaceImg=None, isLive=None, MotionList=None,):
    self.mErrno = mErrno
    self.ErrMsg = ErrMsg
    self.FaceImg = FaceImg
    self.isLive = isLive
    self.MotionList = MotionList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.mErrno = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ErrMsg = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.FaceImg = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.isLive = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.MotionList = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = T_LiveMotionInfo()
            _elem47.read(iprot)
            self.MotionList.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('T_MotionLiveDetectRst')
    if self.mErrno is not None:
      oprot.writeFieldBegin('mErrno', TType.I32, 1)
      oprot.writeI32(self.mErrno)
      oprot.writeFieldEnd()
    if self.ErrMsg is not None:
      oprot.writeFieldBegin('ErrMsg', TType.STRING, 2)
      oprot.writeString(self.ErrMsg)
      oprot.writeFieldEnd()
    if self.FaceImg is not None:
      oprot.writeFieldBegin('FaceImg', TType.STRING, 3)
      oprot.writeString(self.FaceImg)
      oprot.writeFieldEnd()
    if self.isLive is not None:
      oprot.writeFieldBegin('isLive', TType.BOOL, 4)
      oprot.writeBool(self.isLive)
      oprot.writeFieldEnd()
    if self.MotionList is not None:
      oprot.writeFieldBegin('MotionList', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.MotionList))
      for iter48 in self.MotionList:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mErrno)
    value = (value * 31) ^ hash(self.ErrMsg)
    value = (value * 31) ^ hash(self.FaceImg)
    value = (value * 31) ^ hash(self.isLive)
    value = (value * 31) ^ hash(self.MotionList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
