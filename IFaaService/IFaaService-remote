#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from IFaaService import IFaaService
from IFaaService.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('   face_detect_extract(string inputImgName, i64 tId, i32 extType)')
  print('   image_detect_extract(string inputImgName, i64 fromImgId)')
  print('  T_MulAlgFeatureExtRsp multip_feature_query(T_MulAlgFeatureExtReq tMulFeatureExtPara)')
  print('  double face_feature_verify(string inputFace0, string inputFace1)')
  print('  double mulalg_feature_verify(string inputFace0, string inputFace1, i32 type)')
  print('  double face_feature_compare(i32 faceType0, i64 faceId0, i32 faceType1, i64 faceId1)')
  print('  i32 task_surveillance_create(T_IF_TASK_INFO info)')
  print('  i32 task_surveillance_terminate(i64 taskId)')
  print('  i32 task_snaper_create(i32 sourceType, i64 sourceId)')
  print('  i32 task_snaper_terminate(i32 sourceType, i64 sourceId)')
  print('  i32 iface_engin_ioctrl(i32 type, i64 para0, i64 para1, i64 para2, i64 para3)')
  print('  i32 multi_face_verify_url( listPaths)')
  print('  i32 multi_face_verify_bin( listImgDat)')
  print('  double multi_face_compare_bin(string imgdata1, string imgdata2)')
  print('  i32 multi_image_import( listImgInfo, i32 type, i32 srcType, i64 srcId)')
  print('  i32 multi_image_import2(string ImgData, i32 type, i32 srcType, i64 srcId,  attr)')
  print('  string face_detect_rect(string inputImgName, i64 feceId)')
  print('  T_CapRstOndemand capture_on_demand(i64 srcId)')
  print('  i32 iface_merge_ctrl(string inputJsonParam)')
  print('  i32 iface_add_camera(i64 dwCameraId, string strIpcAdr, i32 dwIpcPort, string strIpcUsr, string strIpcPwd, i32 dwEngineId)')
  print('  T_ProgressQueryRst query_prgress_rate(i32 QueryType, i32 ProgressId)')
  print('  i32 engine_update_status(string status)')
  print('  i32 server_info(string info)')
  print('  T_MulAttrDetectRstRsp if_image_detect_extract_url(string inputImg, i32 beDetAttr, i32 beFeaExtra, i32 algType)')
  print('  T_MulAttrDetectRstRsp if_image_detect_extract_bin(string inputImg, i32 beDetAttr, i32 beFeaExtra, i32 algType)')
  print('  T_MulAttrDetectRstRsp_v2 if_image_detect_extract_url_v2(string inputImg,  AttrEnList, i32 beFeaExtra, i32 algType)')
  print('  T_MulAttrDetectRstRsp_v2 if_image_detect_extract_bin_v2(string inputImg,  AttrEnList, i32 beFeaExtra, i32 algType)')
  print('  T_FaceVerifyRstRsp if_mulalg_face_verify_url(string inputFace0, string inputFace1, i32 algType)')
  print('  T_FaceVerifyRstRsp if_mulalg_face_verify_bin(string inputFace0, string inputFace1, i32 algType)')
  print('  T_MotionLiveDetectRst motion_live_detect_url(string inputVideoFileName,  inputMotionList)')
  print('  double if_feature_compare(string feature0, i32 featureLen0, string feature1, i32 featureLen1, i32 version)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = IFaaService.Client(protocol)
transport.open()

if cmd == 'face_detect_extract':
  if len(args) != 3:
    print('face_detect_extract requires 3 args')
    sys.exit(1)
  pp.pprint(client.face_detect_extract(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'image_detect_extract':
  if len(args) != 2:
    print('image_detect_extract requires 2 args')
    sys.exit(1)
  pp.pprint(client.image_detect_extract(args[0],eval(args[1]),))

elif cmd == 'multip_feature_query':
  if len(args) != 1:
    print('multip_feature_query requires 1 args')
    sys.exit(1)
  pp.pprint(client.multip_feature_query(eval(args[0]),))

elif cmd == 'face_feature_verify':
  if len(args) != 2:
    print('face_feature_verify requires 2 args')
    sys.exit(1)
  pp.pprint(client.face_feature_verify(args[0],args[1],))

elif cmd == 'mulalg_feature_verify':
  if len(args) != 3:
    print('mulalg_feature_verify requires 3 args')
    sys.exit(1)
  pp.pprint(client.mulalg_feature_verify(args[0],args[1],eval(args[2]),))

elif cmd == 'face_feature_compare':
  if len(args) != 4:
    print('face_feature_compare requires 4 args')
    sys.exit(1)
  pp.pprint(client.face_feature_compare(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'task_surveillance_create':
  if len(args) != 1:
    print('task_surveillance_create requires 1 args')
    sys.exit(1)
  pp.pprint(client.task_surveillance_create(eval(args[0]),))

elif cmd == 'task_surveillance_terminate':
  if len(args) != 1:
    print('task_surveillance_terminate requires 1 args')
    sys.exit(1)
  pp.pprint(client.task_surveillance_terminate(eval(args[0]),))

elif cmd == 'task_snaper_create':
  if len(args) != 2:
    print('task_snaper_create requires 2 args')
    sys.exit(1)
  pp.pprint(client.task_snaper_create(eval(args[0]),eval(args[1]),))

elif cmd == 'task_snaper_terminate':
  if len(args) != 2:
    print('task_snaper_terminate requires 2 args')
    sys.exit(1)
  pp.pprint(client.task_snaper_terminate(eval(args[0]),eval(args[1]),))

elif cmd == 'iface_engin_ioctrl':
  if len(args) != 5:
    print('iface_engin_ioctrl requires 5 args')
    sys.exit(1)
  pp.pprint(client.iface_engin_ioctrl(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'multi_face_verify_url':
  if len(args) != 1:
    print('multi_face_verify_url requires 1 args')
    sys.exit(1)
  pp.pprint(client.multi_face_verify_url(eval(args[0]),))

elif cmd == 'multi_face_verify_bin':
  if len(args) != 1:
    print('multi_face_verify_bin requires 1 args')
    sys.exit(1)
  pp.pprint(client.multi_face_verify_bin(eval(args[0]),))

elif cmd == 'multi_face_compare_bin':
  if len(args) != 2:
    print('multi_face_compare_bin requires 2 args')
    sys.exit(1)
  pp.pprint(client.multi_face_compare_bin(args[0],args[1],))

elif cmd == 'multi_image_import':
  if len(args) != 4:
    print('multi_image_import requires 4 args')
    sys.exit(1)
  pp.pprint(client.multi_image_import(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'multi_image_import2':
  if len(args) != 5:
    print('multi_image_import2 requires 5 args')
    sys.exit(1)
  pp.pprint(client.multi_image_import2(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'face_detect_rect':
  if len(args) != 2:
    print('face_detect_rect requires 2 args')
    sys.exit(1)
  pp.pprint(client.face_detect_rect(args[0],eval(args[1]),))

elif cmd == 'capture_on_demand':
  if len(args) != 1:
    print('capture_on_demand requires 1 args')
    sys.exit(1)
  pp.pprint(client.capture_on_demand(eval(args[0]),))

elif cmd == 'iface_merge_ctrl':
  if len(args) != 1:
    print('iface_merge_ctrl requires 1 args')
    sys.exit(1)
  pp.pprint(client.iface_merge_ctrl(args[0],))

elif cmd == 'iface_add_camera':
  if len(args) != 6:
    print('iface_add_camera requires 6 args')
    sys.exit(1)
  pp.pprint(client.iface_add_camera(eval(args[0]),args[1],eval(args[2]),args[3],args[4],eval(args[5]),))

elif cmd == 'query_prgress_rate':
  if len(args) != 2:
    print('query_prgress_rate requires 2 args')
    sys.exit(1)
  pp.pprint(client.query_prgress_rate(eval(args[0]),eval(args[1]),))

elif cmd == 'engine_update_status':
  if len(args) != 1:
    print('engine_update_status requires 1 args')
    sys.exit(1)
  pp.pprint(client.engine_update_status(args[0],))

elif cmd == 'server_info':
  if len(args) != 1:
    print('server_info requires 1 args')
    sys.exit(1)
  pp.pprint(client.server_info(args[0],))

elif cmd == 'if_image_detect_extract_url':
  if len(args) != 4:
    print('if_image_detect_extract_url requires 4 args')
    sys.exit(1)
  pp.pprint(client.if_image_detect_extract_url(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'if_image_detect_extract_bin':
  if len(args) != 4:
    print('if_image_detect_extract_bin requires 4 args')
    sys.exit(1)
  pp.pprint(client.if_image_detect_extract_bin(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'if_image_detect_extract_url_v2':
  if len(args) != 4:
    print('if_image_detect_extract_url_v2 requires 4 args')
    sys.exit(1)
  pp.pprint(client.if_image_detect_extract_url_v2(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'if_image_detect_extract_bin_v2':
  if len(args) != 4:
    print('if_image_detect_extract_bin_v2 requires 4 args')
    sys.exit(1)
  pp.pprint(client.if_image_detect_extract_bin_v2(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'if_mulalg_face_verify_url':
  if len(args) != 3:
    print('if_mulalg_face_verify_url requires 3 args')
    sys.exit(1)
  pp.pprint(client.if_mulalg_face_verify_url(args[0],args[1],eval(args[2]),))

elif cmd == 'if_mulalg_face_verify_bin':
  if len(args) != 3:
    print('if_mulalg_face_verify_bin requires 3 args')
    sys.exit(1)
  pp.pprint(client.if_mulalg_face_verify_bin(args[0],args[1],eval(args[2]),))

elif cmd == 'motion_live_detect_url':
  if len(args) != 2:
    print('motion_live_detect_url requires 2 args')
    sys.exit(1)
  pp.pprint(client.motion_live_detect_url(args[0],eval(args[1]),))

elif cmd == 'if_feature_compare':
  if len(args) != 5:
    print('if_feature_compare requires 5 args')
    sys.exit(1)
  pp.pprint(client.if_feature_compare(args[0],eval(args[1]),args[2],eval(args[3]),eval(args[4]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
